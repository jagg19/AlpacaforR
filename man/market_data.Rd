% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Market-Data.R
\name{market_data}
\alias{market_data}
\alias{get_bars}
\title{Get Market Data}
\usage{
market_data(
  ticker,
  v = 1,
  timeframe = "day",
  multiplier = 1,
  from = NULL,
  to = NULL,
  after = NULL,
  until = NULL,
  limit = NULL,
  full = FALSE,
  unadjusted = FALSE
)

get_bars(
  ticker,
  v = 1,
  timeframe = "day",
  multiplier = 1,
  from = NULL,
  to = NULL,
  after = NULL,
  until = NULL,
  limit = NULL,
  full = FALSE,
  unadjusted = FALSE
)
}
\arguments{
\item{ticker}{\code{(character)} The stock or stocks (in vector format) for which data will be retrieved. Non case-sensitive.}

\item{v}{\code{(integer)} The API version number. If \code{1}, the \code{v1} \href{https://alpaca.markets/docs/api-documentation/api-v2/market-data/#endpoint}{IEX/Alpaca API}: data.alpaca.markets/v1 will be used, if \code{2}, the \code{v2} \href{https://alpaca.markets/docs/api-documentation/api-v2/market-data/#polygon-integration}{Polygon/Alpaca API}: api.polygon.io/v2/aggs \href{https://polygon.io/docs/#get_v2_aggs_ticker__ticker__range__multiplier___timespan___from___to__anchor}{Aggregates Endpoint}  will be used.}

\item{timeframe}{\code{(character)} For the \code{v1} API, one of
\itemize{
\item{\code{'t'/'lt'/'trade'}}{ For the last trade price. See \href{https://alpaca.markets/docs/api-documentation/api-v2/market-data/last-trade/}{Last Trade}}
\item{\code{'q'/'lq'/'quote'}}{ For the last quote price. See \href{https://alpaca.markets/docs/api-documentation/api-v2/market-data/last-quote/}{Last Quote}}
\item{\code{'m'}/\code{'min'}/\code{'minute'}}{ (\code{multiplier} can be \code{1}/\code{5}/\code{15})}
\item{\code{'d'}/\code{'day'}}{ (\code{multiplier} will be \code{1})}
}
Not case-sensitive.
For the \code{v2} API, \code{multiplier} can be any \code{integer} for any one of the following \code{timeframe}'s:
\itemize{
\item{\code{'m'}/\code{'min'}/\code{'minute'}}
\item{\code{'h'}/\code{'hour'}}
\item{\code{'d'}/\code{'day'}}
\item{\code{'w'}/\code{'week'}}
\item{\code{'M'}/\code{'mo'}/\code{'month'}}{ (\emph{Note} capitalized M for month)}
\item{\code{'q'}/\code{'quarter'}}
\item{\code{'y'}/\code{'year'}}
}
Case-sensitive}

\item{multiplier}{For the \code{v1} API, with \code{'minute'} \code{timeframe} one of \code{1}/\code{5}/\code{15}. Otherwise, defaults to \code{1}.
For the \code{v2} API, this can be any \code{integer}, also defaults to \code{1}.}

\item{from}{(equivalent to \code{start} in \code{v1}) \code{(Date/POSIXlt/Datetime(POSIXct)/character)} See Details for formatting guidelines. Return data \emph{equal to or after} this time. Default is 7 days ago.}

\item{to}{(equivalent to \code{end} in \code{v1}) \code{(Date/POSIXlt/Datetime(POSIXct)/character)} See Details for formatting guidelines. Return data \emph{equal to or before} this time. Default is today's date.}

\item{after}{\emph{\code{v1} only} \code{(Date/POSIXlt/Datetime(POSIXct)/character)} See Details for formatting guidelines. Return data \emph{after} this time. Default is 7 days ago. \emph{Cannot be used with \code{from}}}

\item{until}{\emph{\code{v1} only} \code{(Date/POSIXlt/Datetime(POSIXct)/character)} See Details for formatting guidelines. Return data \emph{before} this time. Default is today's date. \emph{Cannot be used with \code{from}}}

\item{limit}{\emph{\code{v1} only} \code{(integer)} The amount of bars to return per ticker. This can range from 1 to 1000. Defaults to 1000. \emph{Note:} If \code{full} is set to T, this parameter is ignored and forced to 1000.}

\item{full}{\code{(logical)} If TRUE, the function will attempt to return the entire expected dataset based on the range of dates provided and perform a data completeness check. If the requested from, to dates/times exceed that which can be returned in a single call, the API will be called repeatedly to return the \strong{full} dataset. If FALSE, the request will be submitted to the API as is. \emph{Note:} The \code{v1} API has a call limit of 1000 bars and a rate limit of 200 requests per minute. If the rate limit is reached, queries will pause for 1 minute. Defaults to FALSE.}

\item{unadjusted}{\emph{v2 only} \code{(logical)} Set to \code{TRUE} if the results should \strong{NOT} be adjusted for splits. Defaults to \code{FALSE}.}
}
\value{
\code{list} object for each ticker symbol containing a \code{data.frame} with the following columns:
\itemize{
\item{\code{time}}{  the time of the bar as \code{POSIXct} in yyyy-mm-dd for timeframe = day, and yyyy-mm-dd hh:mm:ss for timeframes < day}
\item{\code{open}}{ \code{(numeric)} open price}
\item{\code{high}}{ \code{(numeric)} high price}
\item{\code{low}}{ \code{(numeric)} low price}
\item{\code{close}}{ \code{(numeric)} close price}
\item{\code{volume}}{ \code{(numeric)} volume (in millions)}
\item{\code{n *v2 only*}}{ \code{(numeric)} Number of items in aggregate window}
}
Additionally, a "query" attribute is attached to each ticker's \code{data.frame} with the "query" data as a \code{list} for each of the calls required to return it. This is accessed via \code{\link[base]{attr}}. Each call is a list with the following items:
\itemize{
\item{\code{ticker}}{ Ticker symbol requested.}
\item{\code{status}}{ The API status code for the response in English}
\item{\code{queryCount}}{ Number of aggregate ( min or day ) used to generate the response.}
\item{\code{resultsCount}}{ Total number of results generated}
\item{\code{adjusted}}{ If this response was adjusted for splits}
\item{\code{status_code}}{ The API status code as an integer.}
}
}
\description{
The bars API provides time-aggregated price and volume data for a single stock or multiple. \strong{The \code{v2} (Polygon) API is only available for live accounts and accepts the \code{from}, \code{to}, \code{timeframe}, \code{multiplier}, and \code{unadjusted} arguments.}

\code{get_bars} is deprecated, use \code{\link[AlpacaforR]{market_data}} instead.
}
\details{
All \code{(Date/POSIXlt)} will parse correctly if in \code{YYYY-MM-DD} \href{https://www.iso.org/iso-8601-date-and-time-format.html}{RFC 3339} format or \code{(Datetime/POSIXct)}, \verb{YYYY-MM-DD HH:MM} \href{https://www.iso.org/iso-8601-date-and-time-format.html}{ISO8601} format. Other formats will often work, but are not guaranteed to parse correctly. All Dates/Datetimes are forced to America/New York timezone (See \code{\link[lubridate]{force_tz}}) in which the NYSE operates. This means that if \code{\link[lubridate]{now}} is used to specify 3PM in the local timezone, it will be forced 3PM in the "America/New_York timezone. This eliminates needing to consistently account for timezone conversions when providing inputs. The \code{v2} API only accepts Dates in YYYY-MM-DD format, any arguments passed to \code{start} or \code{end} will be coerced to Date automatically if using \code{v2}. For the \code{v2} API, queries with \code{timeframe}: \code{'year'} use \code{12/31} as an aggregate date for each year. Arguments passed to \code{from} & \code{to} will be coerced to their yearly \code{\link[lubridate]{round_date}} and \code{\link[lubridate]{ceiling_date}} respectively.
}
\examples{
# Getting one or more tickers from the v1 API: 
market_data(ticker = c("INTC","MSFT"))
# Getting price data with specific date ranges and timeframes, by also limiting the amount of bars returned for each ticker.
market_data(ticker = c("INTC","MSFT"), from = "2019-03-20", to = "2019-04-01", multiplier = 15, timeframe = "min", limit = 175)
# Get three months of hourly data for Beyond Meat from the v2 Polygon API when full = F:
bars <- market_data(ticker = c("BYND"), v = 2, from = "2020-02-20", to = "2020-03-22", multiplier = 1, timeframe = "h")
# Returns successfully
purrr::map(bars, nrow) # Note the number of rows
purrr::map(bars, ~range(.x$time)) # Note that Some data is missing
# Let's take a closer look:
plot(open ~ time, bars$BYND, xaxt = "n", type = "l")
axis(1, bars$BYND$time, format(bars$BYND$time, "\%b \%d"), cex.axis = .7)
# Only about 10\% of the requested data is present. Does the query status metadata indicate anything is wrong?
attr(bars$BYND, "query") # everything checks out, so how do we get all the data we requested?
# Set full = T
bars <- market_data(ticker = c("BYND"), v = 2, from = "2020-02-20", to = "2020-03-22", multiplier = 1, timeframe = "h", full = TRUE)
purrr::map(bars, nrow) # A big difference in the number of rows
purrr::map(bars, ~range(.x$time)) # The range appears the same
# A closer look:
plot(open ~ time, bars$BYND, xaxt = "n", type = "l")
axis(1, bars$BYND$time, format(bars$BYND$time, "\%b \%d"), cex.axis = .7)
# That's more like it!
# Get the last quote for a ticker (or multiple):
market_data("TWTR", timeframe = "q")
# or the last trade for multiple tickers:
market_data(c("TWTR","AAPL","BYND"), timeframe = "t")
get_bars("AAPL")
}
\concept{Market-Data}
