% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/alpaca_websockets.R
\name{ws_create}
\alias{ws_create}
\alias{we_create}
\title{ws_create: Create a Websocket for the Alpaca API}
\usage{
ws_create(ws_name = "ws", logfile = NULL, env = .GlobalEnv)
}
\arguments{
\item{ws_name}{\code{(string)} The function will assign a list object `{ws_name}_msgs` to the environment specified by `env` with a log of websocket messages and their timestamps with prefix `ws_name`. The default is "ws". With the default, the object will be `ws_msgs`.}

\item{logfile}{\code{(character/logical)} The path to and name of the text file where logs for all websocket sessions will be stored. Defaults to *"{ws_name}.log"* in the working directory. Can be optionally turned off by setting to FALSE.}

\item{env}{\code{(environment)} An environment in which to store the `{ws_name}_msgs` websocket message list, and the `.lastmessage` object. Defaults to the **global environment**.}
}
\value{
websocket environment` \code{(environment)} The websocket environment object.

`{ws_name}_msgs` \code{(list)} **Note** The message list object is *returned indirectly, assigned to the environment passed to the `env` argument*, which defaults to the global environment if unset.

`.lastmessage` \code{(character)} **Note** An invisible object *assigned to the `env` environment* that can be called explicitly (sending it's name to the console) to return the last message received from the websocket. If an environment was specified this would be called via `ENVIRONMENT_NAME$.lastmessage` otherwise running `.lastmessage` will provide it.

`logfile` \code{(file)} A file is created in the working directory with the name supplied as the `logfile` argument, if the `logfile` argument isn't specified the name will be *{ws_name}.log* with a log for this and all future websocket sessions called with the same `logfile` parameters:
\itemize{
 \item{The time the connection is created}
 \item{The time and content of each message}
 \item{The time the connection is closed}
}
If `logfile` is FALSE, no log file will be created.
}
\description{
Alpaca has a websocket protocol built into the API that can be accessed at wss://api.alpaca.markets/stream. The full documentation is here: \href{https://alpaca.markets/docs/api-documentation/api-v2/streaming/}{AlpacaDOCS: Streaming}
}
\details{
The function allows a simple set-up for the majority of use cases. If you wish to use certain message content as hooks to execute further functions specific to your Alpaca algorithm, you can do one of two things. 
\enumerate{
 \item{Build a websocket from scratch using the \href{https://rstudio.github.io/websocket/}{websocket documentation} and include the appropriate hooks and functions into the `onMessage` method.}
 \item{Use a background process with \code{\link[later]{later}} or \code{\link[callr]{r_bg}} to monitor the `.lastmessage` object or the `{ws_name}_msgs` object and perform an action when a specific message appears.}
}
}
\examples{
\dontrun{
ws <- ws_create("myws")
# Creates the websocket object `ws`, `myws_msgs` the message list object, `.lastmessage` the last message string, and *myws.log* the log file in the working directory.
}
}
