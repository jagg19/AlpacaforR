% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Websockets.R
\name{ws_create}
\alias{ws_create}
\title{ws_create: Create a Websocket to the Alpaca or Polygon API}
\usage{
ws_create(api = c("a", "p")[1], logfile = T, logbars = F)
}
\arguments{
\item{api}{\code{(character)} The streaming API to connect to, either \code{"Alpaca"/"a"} or \code{"Polygon"/"p"}.}

\item{logfile}{\code{(character/logical)} Either a logical indicating whether to use a logfile (defaults to \emph{"ws_{API}.log"} in the working directory if \code{TRUE}), where \code{{API}} is \code{a/p} depending on the API selected. If you wish to specify a file name & path, this will be the path to and name of the text file where logs for this session will be stored. IE if you want to save all message in \code{Alpaca.log} in the \code{"logs"} folder, add \code{logfile = "logs\\Alpaca"}. If \code{".log"} is not included in the name it will be appended. Tilde path expansion is performed if necessary, see \link[base]{path.expand}. Previous logfiles of the same name will be reused without overwrite. No logs created if \code{FALSE}. \strong{Default \code{TRUE}}.}

\item{logbars}{\code{(logical)} \emph{Polygon only} Flag to indicate whether to save streaming tick data from \href{https://polygon.io/sockets}{Polygon.io channels}. Tick data is saved into a \code{.csv} instead of a \code{.log} file. The filename will be \verb{[Channel].csv} where channel is the name of the channel supplied to the \code{channel} argument in \code{\link[AlpacaforR]{ws_listen}}. If a path was specified to \code{logfile}, these CSV will reside in the same directory as the logfile.}
}
\value{
\code{(list)} With the following objects:
\itemize{
\item{\code{ws}}{\code{(environment)}  The Websocket environment object.}
\item{\code{env}}{\code{(environment)} Environment in which the \code{lastmessage} and \code{tibble} of messages will be stored.}
}

\code{lastmessage} \code{(character)} \strong{Note} An invisible object \emph{assigned to the \code{env} environment} that can be called explicitly (sending it's name to the console) to return the last message received from the websocket.

\code{msgs} \code{(tibble)}  object \emph{assigned to the \code{env} environment} that stores the timestamps \code{ts} and message content \code{msg} for all messages received via the websocket.

\code{logfile} \code{(file)} A file is created in the working directory with the name supplied as the \code{logfile} argument, if the \code{logfile} is \code{TRUE} the name will be \code{ws.log} with a log for this and all future websocket sessions called with the same \code{logfile} parameters:
\itemize{
\item{The time the connection is created}
\item{The time and content of each message}
\item{The time the connection is closed}
}
If \code{logfile} is FALSE, no log file will be created.
}
\description{
The \href{https://alpaca.markets/docs/api-documentation/api-v2/streaming/}{Alpaca Streaming API} provides Trade & Account updates, while the \href{https://polygon.io/sockets}{Polygon Websocket API} offers Trade, Quote, Aggregate (per second) and Aggregate (per minute) streaming.
}
\details{
The function allows a simple set-up for the majority of use cases. The connection can be closed at any time by using the \verb{[OBJECT]$ws$close()} method, where \verb{[OBJECT]} is the object returned from \code{ws_create}. If you wish to use certain message content as hooks to execute further functions specific to your Alpaca algorithm, you can do one of two things.
\enumerate{
\item{Build a websocket from scratch using the \href{https://rstudio.github.io/websocket/}{websocket documentation} and include the appropriate hooks and functions in the \code{onMessage} method.}
\item{Use a background process with \code{\link[later]{later}} or \code{\link[callr]{r_bg}} to monitor the \verb{[OBJECT]$env$lastmessage} object or the \verb{[OBJECT]$env$msgs} object and perform an action when a specific message appears.}
}
}
\examples{
\dontrun{
# must be run in an interactive session
if (interactive()) {
  # Create the Alpaca Websocket and message environment. 
  ws <- ws_create("a")
  # Create the Polygon websocket and message environment, with ticks being logged.
  wsp <- ws_create("p", logbars = T)
  # if you're unable to remember which API the ws object corresponds to:
  attr(ws$ws, "api")
}
}
}
\seealso{
AlpacaforR ws_listen

Other Websockets: 
\code{\link{ws_listen}()}
}
\concept{Websockets}
